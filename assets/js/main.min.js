!function () { "use strict"; class e { constructor(e) { this.apiUrl = e } fetchData = async ({ url: e, method: t = "GET", body: a = {}, headers: s = {} }) => { try { var r = { method: t, headers: { ...s }, body: "GET" !== t ? a : null }, i = await fetch(e, r); if (i.ok) return await i.json(); throw Error(`Error:${i.status}-` + i.statusText) } catch (e) { throw this.handleError(e), e } }; handleError = e => { console.error("An error occurred:", e.message), alert("An error occurred: " + e.message) }; rateLimit = (r, i, o = !1) => { let n, c = 0; return (...e) => { const t = this; var a = Date.now(), s = i - (a - c); o && s <= 0 ? (clearTimeout(n), n = null, c = a, r.apply(t, e)) : n = n || setTimeout(() => { n = null, o || r.apply(t, e) }, o ? s : i) } }; addGlobalEventListener = (e, a, s) => { document.addEventListener(e, e => { var t = e.target.closest(a); t && t.matches(a) && s(e, t) }) }; displayMessage = (e, t = "info", a = 5e3) => { if (this.messageId) { const s = document.getElementById(this.messageId); s && (s.innerHTML = e, s.classList.add("text-" + t), s.classList.remove("invisible"), clearTimeout(this.messageTimeout), this.messageTimeout = setTimeout(() => { s.classList.add("invisible"), s.classList.remove("text-" + t) }, a)) } }; toggleButton = (e, t, a = !1) => { t ? e.insertAdjacentHTML("afterbegin", '<span class="spinner-border spinner-border-sm" aria-hidden="true"></span> ') : (t = document.querySelector(".spinner-border")) && t.remove(), !1 === a && e.removeAttribute("disabled") } } class t extends e { constructor({ apiUrl: e, selector: t, action: a, security: s, url: r, headers: i = {}, additionalData: o = {}, isThrottled: n = !1, cacheExpiryTime: c = 6e4, enableCache: l = !0 }) { super(e), this.selector = t, this.action = a, this.security = s, this.url = r, this.headers = i, this.additionalData = o, this.cacheExpiryTime = c, this.enableCache = l; e = this.handleClick; this.clickHandler = n ? this.rateLimit(e, 1e3, !0) : e, this.addGlobalEventListener("click", this.selector, this.clickHandler) } handleClick = async (e, t) => { e.preventDefault(), this.beforeClick(e); var e = new URLSearchParams({ action: this.action, security: this.security, ...t.dataset, ...this.additionalData }), a = "click_action_" + this.selector; if (this.enableCache && this.isCacheValid(a)) { var s = localStorage.getItem(a); this.afterClickSuccess(JSON.parse(s), t) } else { this.toggleButton(t, !0); try { var r = await this.submitClickData(e); if (this.enableCache && this.cacheResponse(a, r), !r.success) throw Error(r.data || "Unknown error occurred"); this.afterClickSuccess(r.data, t) } catch (e) { this.afterClickFail(e, t) } this.toggleButton(t, !1) } }; submitClickData = async e => this.fetchData({ url: this.url, method: "POST", body: e, headers: this.headers }); beforeClick = () => { console.log("Processing click...") }; getRequsetData = () => new URLSearchParams({ action: this.action, security: this.security, ...this.additionalData }); afterClickSuccess = (e, t) => { this.displayMessage("Click action was successful!"), console.log("Response:", e) }; afterClickFail = (e, t) => { this.displayMessage("Failed to process click action."), console.error("Error:", e), t.setAttribute("disabled", "disabled"), t.innerHTML = e.message }; isCacheValid = e => { e = localStorage.getItem(e + "_time"); return !!e && Date.now() - e < this.cacheExpiryTime }; cacheResponse = (e, t) => { localStorage.setItem(e, JSON.stringify(t)), localStorage.setItem(e + "_time", Date.now()) } } const a = (e, t) => { var { id: t, type: a } = t.dataset, a = document.querySelectorAll(`.like-${a}-` + t); const s = e.status, r = e.count; a.forEach(e => { e.classList.toggle("liked", "liked" === s), e.querySelector(".count").textContent = r, e.setAttribute("title", "liked" === s ? "unlike" : "like") }) }, s = e => { var t = document.querySelector(".more-posts"), a = document.querySelector(".ajax-posts"); a && a.insertAdjacentHTML("beforeend", e.content), t.dataset.currentPage = e.currentPage }, m = { email: { pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/, message: "Invalid email format" }, username: { minLength: 3, errorMessage: { minLength: "Register must be at least {minLength} characters long." } }, author: { minLength: 3, errorMessage: { minLength: "Comment username must be at least {minLength} characters long." } }, regist_password: { minLength: 8, hasUppercase: /[A-Z]/, hasNumber: /\d/, hasSpecialChar: /[!@#$%^&*]/, message: "Password must be at least 8 characters long, include one uppercase letter, one number, and one special character.", errorMessage: { minLength: "Password must be at least {minLength} characters long.", hasUppercase: "Password must contain at least one uppercase letter.", hasNumber: "Password must contain at least one number.", hasSpecialChar: "Password must contain at least one special character." } }, confirm_password: { match: "password", message: "Passwords do not match" }, comment: { minLength: 6, message: "Textarea must be at least 10 characters long", errorMessage: { minLength: "Comment textarea must be at least {minLength} characters long." } } }; class r extends e { constructor({ apiUrl: e, formId: t, url: a, action: s, security: r, headers: i = {}, messageId: o, passwordToggle: n = !1 }) { super(e), this.formId = t, this.url = a, this.action = s, this.security = r, this.headers = i, this.messageId = o, this.passwordToggle = n; e = document.getElementById(this.formId); e && (this.form = e, this.init()) } init = () => { if (document.addEventListener("submit", e => { e.target.id === this.formId && (e.preventDefault(), this.handleFormSubmit()) }), this.passwordToggle) { const a = document.getElementById(this.formId + "-toggle"), s = Array.from(this.form.querySelectorAll('input[type="password"]')); a?.addEventListener("click", () => { return e = s, t = a, e.forEach(e => { var t = "password" === e.type; e.type = t ? "text" : "password" }), void (t.innerText = "password" === e[0].type ? "show" : "hide"); var e, t }) } }; handleFormSubmit = async () => { if (this.validateForm()) { var e = this.form.querySelector('button[type="submit"]'); if (!e.disabled) { this.toggleButton(e, !0); var t = this.getFormData(); this.beforeSubmit(); try { var a = await this.fetchData({ url: this.url, method: "POST", body: t, headers: this.headers }); this.handleSubmitResponse(a) } catch (e) { this.displayMessage(e.message, "danger"), this.afterSubmitFail(e) } finally { this.toggleButton(e, !1) } } } }; validateForm = () => { var e = this.form.querySelectorAll("input, textarea, select"); let l = !0; return e.forEach(e => { t = e, c = (c = m)[t.name], t = t.value; var t, a, s, r, i, o, { valid: n, message: c } = c ? ({ pattern: n, minLength: a, hasUppercase: s, hasNumber: r, hasSpecialChar: i, errorMessage: o } = c, n && !n.test(t) ? { valid: !1, message: c.message || "Invalid format" } : a && t.length < a ? { valid: !1, message: o.minLength.replace("{minLength}", a) } : s && !s.test(t) ? { valid: !1, message: o.hasUppercase } : r && !r.test(t) ? { valid: !1, message: o.hasNumber } : i && !i.test(t) ? { valid: !1, message: o.hasSpecialChar } : { valid: !0 }) : { valid: !0 }; n ? e.classList.remove("is-invalid") : (e.classList.add("is-invalid"), this.displayMessage(c, "danger"), l = !1) }), l }; getFormData () { var e = new FormData(this.form); return e.append("action", this.action), e.append("security", this.security), e } handleSubmitResponse = e => { if (!e.success) throw Error(e.data || "Unknown error occurred"); this.form.reset(), this.afterSubmitSuccess(e.data), this.displayMessage("Form submitted successfully!", "success") }; beforeSubmit = () => { }; afterSubmitSuccess = e => { }; afterSubmitFail = e => { } } const i = e => { var t, a, s = document.getElementById("respond"), r = document.querySelector(".comment-list"), i = "0" === e.comment.comment_parent, i = `<li class="${e.comment.comment_type} list-group-item${i ? "" : "p-0"}"id="comment-${e.comment.comment_ID}"><article id="div-comment-${e.comment.comment_ID}"class="comment-body"><footer class="comment-meta mb-1"><span class="comment-author vcard"><img src="${e.avatar_url}"srcset="${e.avatar_url} 2x"alt="${e.comment.comment_author}"class="avatar avatar-${e.avatar_size} photo"height="${e.avatar_size}"width="${e.avatar_size}"loading="lazy"decoding="async"><b class="fn">${e.comment.comment_author}</b></span><span class="comment-metadata"><span aria-hidden="true">•</span><a href="http://localhost/wordpress/${e.comment.comment_post_ID}/#comment-${e.comment.comment_ID}"><time datetime="${e.comment.comment_date_gmt}">${e.comment.comment_date}</time></a></span></footer>${"0" === e.comment.comment_approved ? '<span class="comment-awaiting-moderation badge rounded-pill bg-info">您的评论正在等待审核。</span>' : ""}<section class="comment-content"style="margin-left: 56px"><p>${e.comment.comment_content}</p></section></article></li>`, e = document.createDocumentFragment(); r ? (a = s.previousElementSibling) ? (t = a.lastElementChild) && t.classList.contains("children") ? t.insertAdjacentHTML("beforeend", i) : ((t = document.createElement("ul")).classList.add("children"), t.innerHTML = i, a.appendChild(t)) : r.insertAdjacentHTML("afterbegin", i) : ((a = document.createElement("div")).classList.add("card", "mb-3"), a.innerHTML = `<ol class="comment-list p-0 m-0 list-group list-group-flush">${i}</ol>`, e.appendChild(a), s.parentNode.appendChild(e)) }; const o = (() => { let t; return () => { t = t || new IntersectionObserver((e, t) => { e.forEach(e => { e.isIntersecting && ((e = e.target).src = e.dataset.src, t.unobserve(e)) }) }, { rootMargin: "0px 0px", threshold: 0 }), document.querySelectorAll(".lazy").forEach(e => t.observe(e)) } })(); var n; n = () => { var e; requestIdleCallback(() => { var e, t; new WOW({ boxClass: "loading-animate", animateClass: "animated", offset: 0, mobile: !0 }).init(), o(), "undefined" != typeof hljs && document.querySelectorAll("pre code").forEach(e => { hljs.highlightBlock(e) }), (e = document.querySelector("#wp-calendar")) && (0 === (e = e.querySelectorAll("tbody td a")).length ? console.warn("No calendar links found.") : e.forEach(e => { e.classList.add("has-posts") })), e = document.body.clientWidth, document.querySelector("#site-header"), t = document.querySelector("#offcanvasMenu"), e < 992 && (t.style.top = parseFloat(getComputedStyle(document.documentElement).marginTop) + "px") }), document.getElementById("scroll-up").addEventListener("click", e => { e.preventDefault(), document.documentElement.scrollIntoView({ behavior: "smooth" }) }), e = { selector: ".like-button", action: "post_like", security: lermData.like_nonce, url: lermData.url, isThrottled: !0, cacheExpiryTime: 6e4, enableCache: !1 }, new t(e).afterClickSuccess = a, new t({ selector: ".more-posts", action: "load_more", security: lermData.nonce, url: lermData.url, additionalData: { query: lermData.posts }, isThrottled: !0, cacheExpiryTime: 6e4, enableCache: !1 }).afterClickSuccess = s, [{ formId: "login", action: lermData.login_action, security: lermData.login_nonce }, { formId: "reset", action: lermData.reset_action, security: lermData.reset_nonce }, { formId: "regist", action: lermData.regist_action, security: lermData.regist_nonce, passwordToggle: !0 }, { formId: "commentform", action: lermData.comment_action, security: lermData.comment_nonce }].forEach(e => { var t = new r({ ...e, url: lermData.url, messageId: e.formId + "-msg" }); "commentform" === e.formId && (t.afterSubmitSuccess = i) }) }, "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", n, { once: !0 }) : n() }();